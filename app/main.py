from fastapi import FastAPI, UploadFile, File, HTTPException, Depends
from fastapi.responses import StreamingResponse
from typing import List
import io
import mimetypes
from sqlalchemy.orm import Session
from .minio_client import minio_client
from . import crud, models, schemas
from .database import SessionLocal, engine
from .db_wait import wait_for_postgres

app = FastAPI(
    title="üßü‚Äç‚ôÄÔ∏è California Gold –ó–ó–ó–ó–ó–ó–ó–ó–ó–û–ú–ë–ò API üßü‚Äç‚ôÇÔ∏è",
    description="""
    üèÜ California Gold –ó–ó–ó–ó–ó–ó–ó–ó–ó–û–ú–ë–ò API üèÜ
    üßü‚Äç‚ôÄÔ∏è –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ú–û–û–û–û–û–û–û–û–û–ó–ì–ò API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ üßü‚Äç‚ôÇÔ∏è

    üßü‚Äç‚ôÄÔ∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ó–ó–ó–ó–ó–ó–ó–ó–ó–û–ú–ë–ò —Å–∏—Å—Ç–µ–º—ã –ú–û–û–û–û–û–û–û–û–û–ó–ì–ò üßü‚Äç‚ôÇÔ∏è

    üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ó–ó–ó–ó–ó–ó–ó–ó–ó–û–ú–ë–ò —Ñ–∞–π–ª–∞–º–∏ –ú–û–û–û–û–û–û–û–û–û–ó–ì–ò
    üßü‚Äç‚ôÄÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ MinIO
    üßü‚Äç‚ôÇÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    üßü‚Äç‚ôÄÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
    üßü‚Äç‚ôÇÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    üßü‚Äç‚ôÄÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è presigned URL

    üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ó–ó–ó–ó–ó–ó–ó–ó–ó–û–ú–ë–ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –ú–û–û–û–û–û–û–û–û–û–ó–ì–ò
    üßü‚Äç‚ôÄÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    üßü‚Äç‚ôÇÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    üßü‚Äç‚ôÄÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π
    üßü‚Äç‚ôÇÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    üßü‚Äç‚ôÄÔ∏è –ü–æ–∏—Å–∫ –ø–æ username

    üîí –ó–ó–ó–ó–ó–ó–ó–ó–ó–û–ú–ë–ò –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ú–û–û–û–û–û–û–û–û–û–ó–ì–ò
    üßü‚Äç‚ôÄÔ∏è –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π —Å PBKDF2-SHA256
    üßü‚Äç‚ôÇÔ∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    üßü‚Äç‚ôÄÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ email –∏ username

    üßü‚Äç‚ôÄÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –ó–ó–ó–ó–ó–ó–ó–ó–ó–û–ú–ë–ò-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –ú–û–û–û–û–û–û–û–û–û–ó–ì–ò! üßü‚Äç‚ôÇÔ∏è
    –ù–∞—à–µ –ó–ó–ó–ó–ó–ó–ó–ó–ó–û–ú–ë–ò API –≥–æ—Ç–æ–≤–æ –∫ –±–æ—é —Å –ª—é–±—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –ú–û–û–û–û–û–û–û–û–û–ó–ì–ò! ‚öîÔ∏è
    """,
    version="1.0.0",
    contact={
        "name": "üßü‚Äç‚ôÄÔ∏è California Gold –ó–ó–ó–ó–ó–ó–ó–ó–ó–û–ú–ë–ò Team –ú–û–û–û–û–û–û–û–û–û–ó–ì–ò üßü‚Äç‚ôÇÔ∏è",
        "email": "zombies@californiagold.com",
    },
    license_info={
        "name": "üßü‚Äç‚ôÄÔ∏è –ó–ó–ó–ó–ó–ó–ó–ó–ó–û–ú–ë–ò MIT License –ú–û–û–û–û–û–û–û–û–û–ó–ì–ò üßü‚Äç‚ôÇÔ∏è",
        "url": "https://opensource.org/licenses/MIT",
    },
)

# –û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç–∞–±–ª–∏—Ü
print("üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL...")
if wait_for_postgres():
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    models.Base.metadata.create_all(bind=engine)
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
else:
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL")

@app.get("/", tags=["üè† –ì–ª–∞–≤–Ω–∞—è"])
def read_root():
    """
    üßü‚Äç‚ôÄÔ∏è **–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–æ–º–±–∏-API** üßü‚Äç‚ôÇÔ∏è
    
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∑–æ–º–±–∏-–∫–æ–º–∞–Ω–¥—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤!
    """
    return {
        "message": "üßü‚Äç‚ôÄÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ California Gold Zombie API! üßü‚Äç‚ôÇÔ∏è",
        "status": "üßü‚Äç‚ôÄÔ∏è –ó–û–ú–ë–ò-–ê–ö–¢–ò–í–ï–ù! üßü‚Äç‚ôÇÔ∏è",
        "version": "1.0.0",
        "zombie_team": "üßü‚Äç‚ôÄÔ∏è California Gold Zombie Squad üßü‚Äç‚ôÇÔ∏è",
        "services": {
            "minio": "üßü‚Äç‚ôÄÔ∏è –ó–û–ú–ë–ò-–ü–û–î–ö–õ–Æ–ß–ï–ù! üßü‚Äç‚ôÇÔ∏è",
            "postgresql": "üßü‚Äç‚ôÄÔ∏è –ó–û–ú–ë–ò-–ü–û–î–ö–õ–Æ–ß–ï–ù! üßü‚Äç‚ôÇÔ∏è"
        },
        "zombie_power": "‚ö° –ù–∞—à–∞ –∑–æ–º–±–∏-—Å–∏–ª–∞ –≥–æ—Ç–æ–≤–∞ –∫ –±–æ—é! ‚ö°",
        "warning": "‚ö†Ô∏è –û—Å—Ç–æ—Ä–æ–∂–Ω–æ! –ó–æ–º–±–∏-–∫–æ–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞—Ä–∞–∑–Ω—ã–º! ‚ö†Ô∏è"
    }

@app.post("/upload", tags=["üìÅ –§–∞–π–ª—ã"])
async def upload_file(file: UploadFile = File(...), bucket_name: str = "uploads"):
    """
    üßü‚Äç‚ôÄÔ∏è **–ó–û–ú–ë–ò-–ó–ê–ì–†–£–ó–ö–ê –§–ê–ô–õ–ê** üßü‚Äç‚ôÇÔ∏è
    
    –ù–∞—à–∏ –∑–æ–º–±–∏-—Ä–æ–±–æ—Ç—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç —Ñ–∞–π–ª—ã –≤ <span style="background: linear-gradient(45deg, #ff6b6b, #4ecdc4); color: white; padding: 2px 6px; border-radius: 4px;">MinIO</span> —Ö—Ä–∞–Ω–∏–ª–∏—â–µ!
    
    - **file**: üßü‚Äç‚ôÄÔ∏è <span style="color: #e74c3c;">–§–∞–π–ª –¥–ª—è –∑–æ–º–±–∏-–∑–∞–≥—Ä—É–∑–∫–∏</span> üßü‚Äç‚ôÇÔ∏è
    - **bucket_name**: üßü‚Äç‚ôÄÔ∏è <span style="color: #3498db;">–ò–º—è –∑–æ–º–±–∏-bucket</span> (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: "uploads") üßü‚Äç‚ôÇÔ∏è
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç <span style="background: #f39c12; color: white; padding: 2px 6px; border-radius: 4px;">–∑–æ–º–±–∏-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</span> –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ! üßü‚Äç‚ôÄÔ∏è
    """
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º content type
        content_type = file.content_type or mimetypes.guess_type(file.filename)[0] or "application/octet-stream"
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å
        file_data = io.BytesIO(await file.read())
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ MinIO
        success = minio_client.upload_file(
            bucket_name=bucket_name,
            object_name=file.filename,
            file_data=file_data,
            content_type=content_type
        )
        
        if success:
            return {
                "message": "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω",
                "filename": file.filename,
                "bucket": bucket_name,
                "size": file.size
            }
        else:
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞")
            
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {str(e)}")

@app.get("/files", tags=["üìÅ –§–∞–π–ª—ã"])
async def list_files(bucket_name: str = "uploads", prefix: str = ""):
    """
    üßü‚Äç‚ôÄÔ∏è **–ó–û–ú–ë–ò-–°–ü–ò–°–û–ö –§–ê–ô–õ–û–í** üßü‚Äç‚ôÇÔ∏è
    
    –ù–∞—à–∏ –∑–æ–º–±–∏-—Å–∫–∞—É—Ç—ã –∏—Å—Å–ª–µ–¥—É—é—Ç <span style="background: linear-gradient(45deg, #667eea, #764ba2); color: white; padding: 2px 6px; border-radius: 4px;">bucket</span> –∏ –Ω–∞—Ö–æ–¥—è—Ç –≤—Å–µ —Ñ–∞–π–ª—ã!
    
    - **bucket_name**: üßü‚Äç‚ôÄÔ∏è <span style="color: #e74c3c;">–ò–º—è –∑–æ–º–±–∏-bucket</span> (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: "uploads") üßü‚Äç‚ôÇÔ∏è
    - **prefix**: üßü‚Äç‚ôÄÔ∏è <span style="color: #9b59b6;">–§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É</span> –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ üßü‚Äç‚ôÇÔ∏è
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç <span style="background: #27ae60; color: white; padding: 2px 6px; border-radius: 4px;">–∑–æ–º–±–∏-—Å–ø–∏—Å–æ–∫</span> —Ñ–∞–π–ª–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏! üßü‚Äç‚ôÄÔ∏è
    """
    try:
        files = minio_client.list_files(bucket_name, prefix)
        return {
            "bucket": bucket_name,
            "files": files,
            "count": len(files)
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {str(e)}")

@app.get("/download/{filename}", tags=["üìÅ –§–∞–π–ª—ã"])
async def download_file(filename: str, bucket_name: str = "uploads"):
    """
    üßü‚Äç‚ôÄÔ∏è **–ó–û–ú–ë–ò-–°–ö–ê–ß–ò–í–ê–ù–ò–ï –§–ê–ô–õ–ê** üßü‚Äç‚ôÇÔ∏è
    
    –ù–∞—à–∏ –∑–æ–º–±–∏-–∫—É—Ä—å–µ—Ä—ã –¥–æ—Å—Ç–∞–≤–ª—è—é—Ç —Ñ–∞–π–ª—ã –∏–∑ <span style="background: linear-gradient(45deg, #ff6b6b, #4ecdc4); color: white; padding: 2px 6px; border-radius: 4px;">MinIO</span> —Ö—Ä–∞–Ω–∏–ª–∏—â–∞!
    
    - **filename**: üßü‚Äç‚ôÄÔ∏è <span style="color: #e74c3c;">–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∑–æ–º–±–∏-—Å–∫–∞—á–∏–≤–∞–Ω–∏—è</span> üßü‚Äç‚ôÇÔ∏è
    - **bucket_name**: üßü‚Äç‚ôÄÔ∏è <span style="color: #3498db;">–ò–º—è –∑–æ–º–±–∏-bucket</span> (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: "uploads") üßü‚Äç‚ôÇÔ∏è
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∞–π–ª –∫–∞–∫ <span style="background: #8e44ad; color: white; padding: 2px 6px; border-radius: 4px;">–∑–æ–º–±–∏-–ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö</span>! üßü‚Äç‚ôÄÔ∏è
    """
    try:
        file_data = minio_client.download_file(bucket_name, filename)
        
        if file_data is None:
            raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º content type
        content_type = mimetypes.guess_type(filename)[0] or "application/octet-stream"
        
        return StreamingResponse(
            io.BytesIO(file_data),
            media_type=content_type,
            headers={"Content-Disposition": f"attachment; filename={filename}"}
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {str(e)}")

@app.delete("/files/{filename}", tags=["üìÅ –§–∞–π–ª—ã"])
async def delete_file(filename: str, bucket_name: str = "uploads"):
    """
    üßü‚Äç‚ôÄÔ∏è **–ó–û–ú–ë–ò-–£–ù–ò–ß–¢–û–ñ–ï–ù–ò–ï –§–ê–ô–õ–ê** üßü‚Äç‚ôÇÔ∏è
    
    –ù–∞—à–∏ –∑–æ–º–±–∏-—É–Ω–∏—á—Ç–æ–∂–∏—Ç–µ–ª–∏ —Å—Ç–∏—Ä–∞—é—Ç —Ñ–∞–π–ª—ã –∏–∑ <span style="background: linear-gradient(45deg, #ff6b6b, #4ecdc4); color: white; padding: 2px 6px; border-radius: 4px;">MinIO</span> —Ö—Ä–∞–Ω–∏–ª–∏—â–∞!
    
    - **filename**: üßü‚Äç‚ôÄÔ∏è <span style="color: #e74c3c;">–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∑–æ–º–±–∏-—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è</span> üßü‚Äç‚ôÇÔ∏è
    - **bucket_name**: üßü‚Äç‚ôÄÔ∏è <span style="color: #3498db;">–ò–º—è –∑–æ–º–±–∏-bucket</span> (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: "uploads") üßü‚Äç‚ôÇÔ∏è
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç <span style="background: #e74c3c; color: white; padding: 2px 6px; border-radius: 4px;">–∑–æ–º–±–∏-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</span> –æ–± —É–¥–∞–ª–µ–Ω–∏–∏! üßü‚Äç‚ôÄÔ∏è
    """
    try:
        success = minio_client.delete_file(bucket_name, filename)
        
        if success:
            return {"message": f"–§–∞–π–ª '{filename}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"}
        else:
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")
            
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {str(e)}")

@app.get("/files/{filename}/url", tags=["üìÅ –§–∞–π–ª—ã"])
async def get_file_url(filename: str, bucket_name: str = "uploads", expires: int = 3600):
    """
    üßü‚Äç‚ôÄÔ∏è **–ó–û–ú–ë–ò-PRESIGNED URL** üßü‚Äç‚ôÇÔ∏è
    
    –ù–∞—à–∏ –∑–æ–º–±–∏-–º–∞–≥–∏ —Å–æ–∑–¥–∞—é—Ç <span style="background: linear-gradient(45deg, #f39c12, #e67e22); color: white; padding: 2px 6px; border-radius: 4px;">–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–æ–º–±–∏-—Å—Å—ã–ª–∫–∏</span> –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º!
    
    - **filename**: üßü‚Äç‚ôÄÔ∏è <span style="color: #e74c3c;">–ò–º—è –∑–æ–º–±–∏-—Ñ–∞–π–ª–∞</span> üßü‚Äç‚ôÇÔ∏è
    - **bucket_name**: üßü‚Äç‚ôÄÔ∏è <span style="color: #3498db;">–ò–º—è –∑–æ–º–±–∏-bucket</span> (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: "uploads") üßü‚Äç‚ôÇÔ∏è
    - **expires**: üßü‚Äç‚ôÄÔ∏è <span style="color: #9b59b6;">–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∑–æ–º–±–∏-—Å—Å—ã–ª–∫–∏</span> –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 3600) üßü‚Äç‚ôÇÔ∏è
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç <span style="background: #16a085; color: white; padding: 2px 6px; border-radius: 4px;">–∑–æ–º–±–∏-presigned URL</span> –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞! üßü‚Äç‚ôÄÔ∏è
    """
    try:
        url = minio_client.get_presigned_url(bucket_name, filename, expires)
        
        if url:
            return {
                "filename": filename,
                "url": url,
                "expires_in_seconds": expires
            }
        else:
            raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ URL")
            
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {str(e)}")

@app.get("/health", tags=["üîß –°–∏—Å—Ç–µ–º–∞"])
async def health_check():
    """
    üßü‚Äç‚ôÄÔ∏è **–ó–û–ú–ë–ò-–ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø** üßü‚Äç‚ôÇÔ∏è
    
    –ù–∞—à–∏ –∑–æ–º–±–∏-–¥–æ–∫—Ç–æ—Ä–∞ –ø—Ä–æ–≤–µ—Ä—è—é—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö <span style="background: linear-gradient(45deg, #ff6b6b, #4ecdc4); color: white; padding: 2px 6px; border-radius: 4px;">–∑–æ–º–±–∏-—Å–µ—Ä–≤–∏—Å–æ–≤</span> API!
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç <span style="background: #27ae60; color: white; padding: 2px 6px; border-radius: 4px;">–∑–æ–º–±–∏-—Å—Ç–∞—Ç—É—Å</span> MinIO –∏ –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–æ–º–±–∏-—Å–∏—Å—Ç–µ–º—ã! üßü‚Äç‚ôÄÔ∏è
    """
    return {
        "status": "healthy",
        "minio_endpoint": minio_client.endpoint,
        "message": "FastAPI –∏ MinIO —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    }

# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

@app.post("/users/", response_model=schemas.UserResponse, tags=["üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"])
def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):
    """
    üßü‚Äç‚ôÄÔ∏è **–ó–û–ú–ë–ò-–°–û–ó–î–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø** üßü‚Äç‚ôÇÔ∏è
    
    –ù–∞—à–∏ –∑–æ–º–±–∏-–∞–∫—É—à–µ—Ä—ã —Å–æ–∑–¥–∞—é—Ç –Ω–æ–≤–æ–≥–æ <span style="background: linear-gradient(45deg, #f093fb, #f5576c); color: white; padding: 2px 6px; border-radius: 4px;">–∑–æ–º–±–∏-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</span> –≤ —Å–∏—Å—Ç–µ–º–µ!
    
    - **username**: üßü‚Äç‚ôÄÔ∏è <span style="color: #e74c3c;">–£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∑–æ–º–±–∏-–∏–º—è</span> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üßü‚Äç‚ôÇÔ∏è
    - **email**: üßü‚Äç‚ôÄÔ∏è <span style="color: #3498db;">–ó–æ–º–±–∏-email –∞–¥—Ä–µ—Å</span> (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º) üßü‚Äç‚ôÇÔ∏è
    - **password**: üßü‚Äç‚ôÄÔ∏è <span style="color: #9b59b6;">–ó–æ–º–±–∏-–ø–∞—Ä–æ–ª—å</span> (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤) üßü‚Äç‚ôÇÔ∏è
    - **full_name**: üßü‚Äç‚ôÄÔ∏è <span style="color: #f39c12;">–ü–æ–ª–Ω–æ–µ –∑–æ–º–±–∏-–∏–º—è</span> (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) üßü‚Äç‚ôÇÔ∏è
    - **bio**: üßü‚Äç‚ôÄÔ∏è <span style="color: #16a085;">–ó–æ–º–±–∏-–±–∏–æ–≥—Ä–∞—Ñ–∏—è</span> (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) üßü‚Äç‚ôÇÔ∏è
    - **avatar_url**: üßü‚Äç‚ôÄÔ∏è <span style="color: #8e44ad;">–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–æ–º–±–∏-–∞–≤–∞—Ç–∞—Ä</span> (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) üßü‚Äç‚ôÇÔ∏è
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç <span style="background: #27ae60; color: white; padding: 2px 6px; border-radius: 4px;">–∑–æ–º–±–∏-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</span> –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ! üßü‚Äç‚ôÄÔ∏è
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
    db_user = crud.get_user_by_email(db, email=user.email)
    if db_user:
        raise HTTPException(status_code=400, detail="Email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username
    db_user = crud.get_user_by_username(db, username=user.username)
    if db_user:
        raise HTTPException(status_code=400, detail="Username —É–∂–µ –∑–∞–Ω—è—Ç")
    
    return crud.create_user(db=db, user=user)

@app.get("/users/", response_model=List[schemas.UserResponse], tags=["üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"])
def read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    """
    üßü‚Äç‚ôÄÔ∏è **–ó–û–ú–ë–ò-–°–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô** üßü‚Äç‚ôÇÔ∏è
    
    –ù–∞—à–∏ –∑–æ–º–±–∏-–ø–µ—Ä–µ–ø–∏—Å—á–∏–∫–∏ —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç <span style="background: linear-gradient(45deg, #667eea, #764ba2); color: white; padding: 2px 6px; border-radius: 4px;">–∑–æ–º–±–∏-—Å–ø–∏—Å–æ–∫</span> –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!
    
    - **skip**: üßü‚Äç‚ôÄÔ∏è <span style="color: #e74c3c;">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∑–æ–º–±–∏-–ø—Ä–æ–ø—É—Å–∫–∞</span> (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0) üßü‚Äç‚ôÇÔ∏è
    - **limit**: üßü‚Äç‚ôÄÔ∏è <span style="color: #3498db;">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–º–±–∏-–∑–∞–ø–∏—Å–µ–π</span> (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 100) üßü‚Äç‚ôÇÔ∏è
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç <span style="background: #27ae60; color: white; padding: 2px 6px; border-radius: 4px;">–∑–æ–º–±–∏-—Å–ø–∏—Å–æ–∫</span> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏! üßü‚Äç‚ôÄÔ∏è
    """
    users = crud.get_users(db, skip=skip, limit=limit)
    return users

@app.get("/users/{user_id}", response_model=schemas.UserResponse, tags=["üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"])
def read_user(user_id: int, db: Session = Depends(get_db)):
    """
    üßü‚Äç‚ôÄÔ∏è **–ó–û–ú–ë–ò-–ü–û–ò–°–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ü–û ID** üßü‚Äç‚ôÇÔ∏è
    
    –ù–∞—à–∏ –∑–æ–º–±–∏-–¥–µ—Ç–µ–∫—Ç–∏–≤—ã –Ω–∞—Ö–æ–¥—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ <span style="background: linear-gradient(45deg, #e74c3c, #c0392b); color: white; padding: 2px 6px; border-radius: 4px;">–∑–æ–º–±–∏-–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É</span>!
    
    - **user_id**: üßü‚Äç‚ôÄÔ∏è <span style="color: #e74c3c;">–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∑–æ–º–±–∏-–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä</span> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üßü‚Äç‚ôÇÔ∏è
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç <span style="background: #27ae60; color: white; padding: 2px 6px; border-radius: 4px;">–ø–æ–ª–Ω—É—é –∑–æ–º–±–∏-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</span> –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ! üßü‚Äç‚ôÄÔ∏è
    """
    db_user = crud.get_user(db, user_id=user_id)
    if db_user is None:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return db_user

@app.put("/users/{user_id}", response_model=schemas.UserResponse, tags=["üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"])
def update_user(user_id: int, user_update: schemas.UserUpdate, db: Session = Depends(get_db)):
    """
    üßü‚Äç‚ôÄÔ∏è **–ó–û–ú–ë–ò-–û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø** üßü‚Äç‚ôÇÔ∏è
    
    –ù–∞—à–∏ –∑–æ–º–±–∏-—Ö–∏—Ä—É—Ä–≥–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ <span style="background: linear-gradient(45deg, #f39c12, #e67e22); color: white; padding: 2px 6px; border-radius: 4px;">–∑–æ–º–±–∏-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</span>!
    
    - **user_id**: üßü‚Äç‚ôÄÔ∏è <span style="color: #e74c3c;">–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∑–æ–º–±–∏-–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä</span> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üßü‚Äç‚ôÇÔ∏è
    - **user_update**: üßü‚Äç‚ôÄÔ∏è <span style="color: #3498db;">–ó–æ–º–±–∏-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</span> (–≤—Å–µ –ø–æ–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã) üßü‚Äç‚ôÇÔ∏è
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç <span style="background: #27ae60; color: white; padding: 2px 6px; border-radius: 4px;">–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–æ–º–±–∏-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</span> –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ! üßü‚Äç‚ôÄÔ∏è
    """
    db_user = crud.update_user(db, user_id=user_id, user_update=user_update)
    if db_user is None:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return db_user

@app.delete("/users/{user_id}", tags=["üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"])
def delete_user(user_id: int, db: Session = Depends(get_db)):
    """
    üßü‚Äç‚ôÄÔ∏è **–ó–û–ú–ë–ò-–£–ù–ò–ß–¢–û–ñ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø** üßü‚Äç‚ôÇÔ∏è
    
    –ù–∞—à–∏ –∑–æ–º–±–∏-–ø–∞–ª–∞—á–∏ —É–¥–∞–ª—è—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ <span style="background: linear-gradient(45deg, #e74c3c, #c0392b); color: white; padding: 2px 6px; border-radius: 4px;">–∑–æ–º–±–∏-—Å–∏—Å—Ç–µ–º—ã</span>!
    
    - **user_id**: üßü‚Äç‚ôÄÔ∏è <span style="color: #e74c3c;">–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∑–æ–º–±–∏-–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä</span> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üßü‚Äç‚ôÇÔ∏è
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç <span style="background: #e74c3c; color: white; padding: 2px 6px; border-radius: 4px;">–∑–æ–º–±–∏-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</span> –æ–± —É–¥–∞–ª–µ–Ω–∏–∏! üßü‚Äç‚ôÄÔ∏è
    """
    success = crud.delete_user(db, user_id=user_id)
    if not success:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return {"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"}

@app.get("/users/username/{username}", response_model=schemas.UserResponse, tags=["üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"])
def read_user_by_username(username: str, db: Session = Depends(get_db)):
    """
    üßü‚Äç‚ôÄÔ∏è **–ó–û–ú–ë–ò-–ü–û–ò–°–ö –ü–û USERNAME** üßü‚Äç‚ôÇÔ∏è
    
    –ù–∞—à–∏ –∑–æ–º–±–∏-—Å—ã—â–∏–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ <span style="background: linear-gradient(45deg, #9b59b6, #8e44ad); color: white; padding: 2px 6px; border-radius: 4px;">–∑–æ–º–±–∏-–∏–º–µ–Ω–∏</span> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!
    
    - **username**: üßü‚Äç‚ôÄÔ∏è <span style="color: #e74c3c;">–ó–æ–º–±–∏-–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</span> –¥–ª—è –ø–æ–∏—Å–∫–∞ üßü‚Äç‚ôÇÔ∏è
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç <span style="background: #27ae60; color: white; padding: 2px 6px; border-radius: 4px;">–ø–æ–ª–Ω—É—é –∑–æ–º–±–∏-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</span> –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ! üßü‚Äç‚ôÄÔ∏è
    """
    db_user = crud.get_user_by_username(db, username=username)
    if db_user is None:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return db_user
