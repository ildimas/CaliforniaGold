#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ZIP —Ñ–∞–π–ª–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É jobs
"""
import os
import sys
from sqlalchemy import create_engine, text
from sqlalchemy.exc import SQLAlchemyError

# –ü–æ–ª—É—á–∞–µ–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
DATABASE_URL = os.getenv("DATABASE_URL", "postgresql://postgres:password@localhost:5432/californiagold")

def migrate_jobs_zip():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ZIP —Ñ–∞–π–ª–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É jobs"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        engine = create_engine(DATABASE_URL)
        
        with engine.connect() as connection:
            # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            trans = connection.begin()
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ jobs
                result = connection.execute(text("""
                    SELECT EXISTS (
                        SELECT FROM information_schema.tables 
                        WHERE table_schema = 'public' 
                        AND table_name = 'jobs'
                    );
                """))
                
                table_exists = result.scalar()
                
                if not table_exists:
                    print("‚ùå –¢–∞–±–ª–∏—Ü–∞ 'jobs' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —É–∂–µ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
                result = connection.execute(text("""
                    SELECT column_name 
                    FROM information_schema.columns 
                    WHERE table_name = 'jobs' 
                    AND column_name IN ('file_type', 'zip_contents');
                """))
                
                existing_columns = [row[0] for row in result.fetchall()]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É file_type –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                if 'file_type' not in existing_columns:
                    print("üîÑ –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É 'file_type'...")
                    connection.execute(text("""
                        ALTER TABLE jobs 
                        ADD COLUMN file_type VARCHAR(20) DEFAULT 'single';
                    """))
                    print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ 'file_type' –¥–æ–±–∞–≤–ª–µ–Ω–∞")
                else:
                    print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ 'file_type' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É zip_contents –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                if 'zip_contents' not in existing_columns:
                    print("üîÑ –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É 'zip_contents'...")
                    connection.execute(text("""
                        ALTER TABLE jobs 
                        ADD COLUMN zip_contents TEXT;
                    """))
                    print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ 'zip_contents' –¥–æ–±–∞–≤–ª–µ–Ω–∞")
                else:
                    print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ 'zip_contents' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                
                # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è file_type –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
                try:
                    print("üîÑ –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è 'file_type'...")
                    connection.execute(text("""
                        CREATE INDEX IF NOT EXISTS idx_jobs_file_type 
                        ON jobs(file_type);
                    """))
                    print("‚úÖ –ò–Ω–¥–µ–∫—Å –¥–ª—è 'file_type' —Å–æ–∑–¥–∞–Ω")
                except Exception as e:
                    print(f"‚ö†Ô∏è  –ò–Ω–¥–µ–∫—Å –¥–ª—è 'file_type' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞: {e}")
                
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                trans.commit()
                
                print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ZIP —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                return True
                
            except SQLAlchemyError as e:
                # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                trans.rollback()
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ZIP —Ñ–∞–π–ª–æ–≤...")
    success = migrate_jobs_zip()
    
    if success:
        print("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("üí• –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π!")
        sys.exit(1)
